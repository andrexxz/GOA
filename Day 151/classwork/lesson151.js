/*# Level 151:

# 1. vscode - ში შექმენით ტექსტური ფაილი, სახელწოდებით: api.txt  - თქვენი დავალებაა api ახსნათ კომენტარების გამოყენებით, გამოიყენეთ დღეს ნასწავლი მასალა. ახსენით დეტალურად, სხვადასხვა მაგალითის გამოყენებით.

# არ მიიღება მოკლე განმარტება/ახსნა. მინ ხაზი: 100-120*/
// API (Application Programming Interface) არის პროგრამული ინტერფეისი, რომელიც საშუალებას აძლევს სხვადასხვა პროგრამებს და სისტემებს ურთიერთქმედონ ერთმანეთთან. API-ები გამოიყენება მონაცემების გაცვლის, ფუნქციონალობის გაზიარებისა და სხვადასხვა სერვისების ინტეგრაციისთვის. ისინი შეიძლება იყვნენ როგორც საჯარო, ისე კერძო, რაც დამოკიდებულია იმაზე, ვინ და როგორ იყენებს მათ.
// API-ების ძირითადი ტიპები:
// 1. **RESTful API**: ეს არის ყველაზე გავრცელებული ტიპი, რომელიც იყენებს HTTP მეთოდებს (GET, POST, PUT, DELETE) და JSON ან XML ფორმატს მონაცემების გადაცემისთვის. RESTful API-ები მარტივია და ადვილად გასაგებია, რაც მათ პოპულარულს ხდის ვებსერვისებში.
// 2. **SOAP API**: ეს არის სტანდარტიზებული პროტოკოლი, რომელიც იყენებს XML ფორმატს მონაცემების გადაცემისთვის. SOAP API-ები უფრო რთულია და მოითხოვს დამატებითი კონფიგურაციისთვის, მაგრამ ისინი უზრუნველყოფენ უფრო მაღალ უსაფრთხოებას და ტრანსაქციების მხარდაჭერას.
// 3. **GraphQL API**: ეს არის ახალი ტიპის API, რომელიც საშუალებას აძლევს მომხმარებელს დააკონფიგურიროს, რა მონაცემები სურს და მიიღოს მხოლოდ ის ინფორმაცია, რაც საჭიროა. GraphQL API-ები უფრო მოქნილია და ეფექტურია, განსაკუთრებით მაშინ, როდესაც საჭიროა დიდი რაოდენობის მონაცემების მიღება.
// 4. **WebSocket API**: ეს არის პროტოკოლი, რომელიც საშუალებას აძლევს ორ მხარეს (კლაიენტი და სერვერი) მუდმივი კავშირის შენარჩუნებას და რეალურ დროში მონაცემების გაცვლას. WebSocket API-ები ხშირად გამოიყენება ჩატ აპლიკაციებში და სხვა რეალურ დროში სერვისებში.
// API-ების გამოყენების მაგალითები:
// 1. **სოციალური მედიის ინტეგრაცია**: აპლიკაცია შეიძლება გამოიყენოს Facebook-ის ან Twitter-ის API, რათა მომხმარებლებმა შეძლონ თავიანთი პროფილების მონაცემების გაზიარება ან ახალი პოსტების შექმნა.
// 2. **მონაცემთა ბაზასთან ურთიერთქმედება**: ვებსაიტი შეიძლება გამოიყენოს RESTful API, რათა მომხმარებლებმა შეძლონ მონაცემების დამატება, წაშლა ან განახლება მონაცემთა ბაზაში.
// 3. **გეოლოკაციის სერვისები**: აპლიკაცია შეიძლება გამოიყენოს Google Maps API, რათა მომხმარებლებმა შეძლონ რუკების ჩვენება და ლოკაციის მოძიება.
// 4. **მომხმარებლის ავტორიზაცია**: აპლიკაცია შეიძლება გამოიყენოს OAuth API, რათა მომხმარებლებმა შეძლონ შესვლა მესამე მხარის სერვისებით, როგორიცაა Google ან Facebook, და თავიდან აიცილონ ახალი ანგარიშის შექმნა.
